directive @min(value: Int!) on INPUT_FIELD_DEFINITION

type Query {
    # User queries
    getAllUsers(page: Int, size: Int): UserPage!
    getUserById(id: ID!): User
    getUserByUsername(username: String!): User

    # Pet queries
    getAllPets(page: Int, size: Int, filter: PetFilter): PetPage!
    getPetById(id: ID!): Pet
    getPetsBySpecies(species: String!): [Pet!]!
    getPetsByFilter(filter: PetFilter): [Pet!]!
}

input PetFilter {
    species: String
    available: Boolean
    minAge: Int
    maxAge: Int
}

type PetPage {
    content: [Pet!]!
    pageInfo: PaginationInfo!
}

type Mutation {
    # User mutations
    createUser(user: UserInput!): User!
    updateUser(id: ID!, user: UserUpdateInput!): User!
    deleteUser(id: ID!): Boolean!

    # Pet mutations
    createPet(pet: PetInput!): Pet!
    updatePet(id: ID!, pet: PetUpdateInput!): Pet!
    deletePet(id: ID!): Boolean!
}

# User types
type User {
    id: ID!
    username: String!
    email: String!
}

type UserPage {
    content: [User!]!
    pageInfo: PaginationInfo!
}

type PaginationInfo {
    totalElements: Int!
    totalPages: Int!
    currentPage: Int!
    pageSize: Int!
}

input UserInput {
    username: String!
    email: String!
    password: String!
}

input UserUpdateInput {
    username: String
    email: String
    password: String
}

# Pet types
type Pet {
    id: ID!
    name: String!
    species: String!
    available: Boolean!
    age: Int!
    owner: User
    location: String
}

input PetInput {
    name: String!
    species: String!
    available: Boolean!
    age: Int!
    ownerId: ID
    location: String
}

input PetUpdateInput {
    name: String
    species: String
    available: Boolean
    age: Int @min(value: 0)
    ownerId: ID
    location: String
}