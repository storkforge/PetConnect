### 1. Basic Pet Connectivity Test
GET http://localhost:8080/graphql?query={__typename}
Accept: application/json

### 2. Pet Schema Validation (Introspection)
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { __type(name: \"Pet\") { name fields { name type { name } } } }"
}

### 3. Get all pets (Happy Path)
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { getAllPets { id name species available age owner location } }"
}

### 4. Get single pet (Happy Path)
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { getPetById(id: 1) { id name species available } }"
}

### 5. Get non-existent pet (Error Case)
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { getPetById(id: 9999) { id } }"
}

### 6. Create pet mutation (Happy Path)
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "mutation { createPet(pet: { name: \"Fluffy\", species: \"Cat\", available: true, age: 3, owner: \"John Doe\", location: \"Stockholm\" }) { id name species available } }"
}

### 7. Create invalid pet (Error Case - Missing required fields)
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "mutation { createPet(pet: { name: \"\" }) { id } }"
}

### 8. Partial update mutation (Happy Path)
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "mutation { updatePet(id: 1, pet: { available: false, location: \"Gothenburg\" }) { id available location } }"
}

### 9. Update non-existent pet (Error Case)
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "mutation { updatePet(id: 9999, pet: { name: \"Ghost\" }) { id } }"
}

### 10. Create test pet for deletion
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "mutation { createPet(pet: { name: \"ToDelete\", species: \"Dog\", available: true, age: 5 }) { id } }"
}

### 11. Delete pet (Happy Path) - Replace ID with actual value from previous response
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "mutation { deletePet(id: REPLACE_WITH_ACTUAL_ID) }"
}

### 12. Delete already deleted pet (Error Case)
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "mutation { deletePet(id: 3) }"
}

### 13. Malformed Pet Query Test (Syntax Error)
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { getPetById(id: 1 { id }"
}

### 14. Invalid Pet Field Test
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { getPetById(id: 1) { id nonExistentField } }"
}

### 15. Batch Pet Query Test
POST http://localhost:8080/graphql
Content-Type: application/json

[
  {
    "query": "query { getPetById(id: 1) { name } }"
  },
  {
    "query": "query { getAllPets { species } }"
  }
]

### 16. Query Pet with Variables
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query GetPet($petId: ID!) { getPetById(id: $petId) { name species } }",
  "variables": { "petId": 1 }
}

### 17. Complex Pet Query with Filtering
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query($filter: PetFilter) { getAllPets(filter: $filter) { content { name species available age } pageInfo { totalElements } } }",
  "variables": {
    "filter": {
      "species": "Dog",
      "available": true,
      "minAge": 1,
      "maxAge": 10
    }
  }
}
### 18. Filter Pets by Species Only
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { getAllPets(filter: { species: \"Cat\" }) { content { name species } } }"
}

### 19. Filter Available Pets
POST http://localhost:8080/graphql
Content-Type: application/json

{
   "query": "query { getAllPets(filter: { available: true }) { content { name available } } }"
}

### 20. Filter Pets by Age Range
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { getAllPets(filter: { minAge: 2, maxAge: 5 }) { content { name age } } }"
}
### 21. Filter with Pagination
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { getAllPets(filter: { species: \"Dog\" }, page: 1, size: 5) { content { name } pageInfo { totalElements currentPage } } }"
}
### 22. Invalid Filter (Negative Age)
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { getAllPets(filter: { minAge: -1 }) { content { name } } }"
}
### 23. Create Pet with Minimum Required Fields
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "mutation { createPet(pet: { name: \"Minimal\", species: \"Rabbit\", available: true, age: 1 }) { id } }"
}

### 24. Update All Pet Fields
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "mutation { updatePet(id: 1, pet: { name: \"Updated\", species: \"Updated\", available: false, age: 10, owner: \"New Owner\", location: \"New Location\" }) { id name species available age owner location } }"
}

### 25. Performance Test - Multiple Pet Queries
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { pet1: getPetById(id: 1) { name }, pet2: getPetById(id: 2) { name }, allPets: getAllPets { id } }"
}